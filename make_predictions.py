# -*- coding: utf-8 -*-
"""make_predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQqNzsMKndhufKdsyMuGcHQotLUT2TKT
"""

import pandas as pd
import re
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from argparse import Namespace, ArgumentParser

from sklearn.metrics import classification_report, confusion_matrix, f1_score, make_scorer
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV

import joblib

def arg_parser() -> Namespace:
    
    parser = ArgumentParser()

    parser.add_argument('--save_train_df_path',
                        type=str,
                        required=True,
                        help='Path where located preprocessed train df')

    parser.add_argument('--save_test_df_path',
                        type=str,
                        required=True,
                        help='Path where located preprocessed test df')
    
    parser.add_argument('--save_model_path',
                        type=str,
                        required=True,
                        help='Path where located model')

    args = parser.parse_args()

    return args

def predict(args):
    train_df = pd.read_csv(args.save_train_df_path)
    test_df = pd.read_csv(args.save_test_df_path)

    X_train = train_df.drop(columns=["diabetes"]).to_numpy()
    X_test = test_df.drop(columns=["diabetes"]).to_numpy()
    y_train = train_df[['diabetes']].to_numpy().ravel()
    y_test = test_df[['diabetes']].to_numpy().ravel()

    model_gbc_grid = joblib.load(args.save_model_path)

    y_pred = model_gbc_grid.best_estimator_.predict(X_test)
    print(y_pred)

    confusion = confusion_matrix(y_test, y_pred)

    plt.figure(figsize=(8, 6))
    sns.heatmap(confusion, annot=True, fmt="d", cmap="Blues")
    plt.xlabel('Предсказанные значения')
    plt.ylabel('Реальные значения')
    plt.title('Матрица ошибок')
    plt.show()

    print(f'Test F1-score - : {model_gbc_grid.score(X_test, y_test):.3f}')

if __name__ == '__main__':
    predict(arg_parser())
