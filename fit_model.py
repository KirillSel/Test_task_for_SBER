# -*- coding: utf-8 -*-
"""fit_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132Y4sFII7h8_mS0KSiEAnk-t8yb68KKE
"""

import pandas as pd
import re
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from argparse import Namespace, ArgumentParser

from sklearn.metrics import classification_report, confusion_matrix, f1_score, make_scorer
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV

import joblib

def arg_parser() -> Namespace:
    
    parser = ArgumentParser()

    parser.add_argument('--save_train_df_path',
                        type=str,
                        required=True,
                        help='Path where located preprocessed train df')

    parser.add_argument('--save_test_df_path',
                        type=str,
                        required=True,
                        help='Path where located preprocessed test df')
    
    parser.add_argument('--save_model_path',
                        type=str,
                        required=True,
                        help='Path where located model')

    args = parser.parse_args()

    return args

def fit(args):
    train_df = pd.read_csv(args.save_train_df_path)
    test_df = pd.read_csv(args.save_test_df_path)

    X_train = train_df.drop(columns=["diabetes"]).to_numpy()
    X_test = test_df.drop(columns=["diabetes"]).to_numpy()
    y_train = train_df[['diabetes']].to_numpy().ravel()
    y_test = test_df[['diabetes']].to_numpy().ravel()

    gbc = GradientBoostingClassifier(random_state = 42)

    f1 = make_scorer(f1_score , average='binary')

    model_param_grid_gbc = [{
        "learning_rate": [0.05, 0.1, 0.5, 1],
        "n_estimators": [200, 350, 500],
        'max_depth': [10, 20, 40],
    }]

    model_gbc_grid = GridSearchCV(gbc, model_param_grid_gbc, cv=3, scoring = f1, verbose = 3)


    model_gbc_grid.fit(X_train, y_train)

    print(model_gbc_grid.best_params_)

    joblib.dump(model_gbc_grid, args.save_model_path)

if __name__ == '__main__':
    fit(arg_parser())
